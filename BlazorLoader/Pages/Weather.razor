@page "/weather"
@using BlazorLoader.Configuration
@inject IConfiguration Configuration
@inject HttpService HttpService
@inject BlazorQuery<WeatherForecast[]> BlazorQuery
<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<BlazorLoader QueryState="@BlazorQuery.QueryState">
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in BlazorQuery.Response)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
</BlazorLoader>

@code {

    protected async override Task OnInitializedAsync()
    {

        var fetchTask =
        HttpService.FetchAsync<WeatherForecast[]>("http://localhost:5219/sample-data/weather.json");
        await BlazorQuery.ExecuteAsync(["weather"], fetchTask);
        //query.invalidateQueries({ queryKey: ['todos'] })
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
